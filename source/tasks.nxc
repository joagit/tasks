#define CHAR_WIDTH 6
#define XL 2*CHAR_WIDTH
#define XC 7*CHAR_WIDTH
#define XR 12*CHAR_WIDTH

#define SHORTBUTTONPRESS 0
#define LONGBUTTONPRESS 1
#define UNDEFINEDBUTTONPRESS 2

byte button[] = {BTNLEFT, BTNRIGHT, BTNCENTER};
int lcd_x[] = {XL, XR, XC};
bool active_button_event[] = {false, false, false};
bool button_press_detected[] = {false, false, false};
byte button_press_type[3];
mutex buttonStateMutex;

void ResetButtonCounts(const byte & btn)
{
  SetButtonPressCount(btn,0);
  SetButtonLongPressCount(btn,0);
  SetButtonShortReleaseCount(btn,0);
  SetButtonLongReleaseCount(btn,0);
  SetButtonReleaseCount(btn,0);
}

task button_handler()
{
  int btn;
  for (int n=0; n<3; n++)
  {
    btn = button[n];
    ResetButtonCounts(btn);
  }
  while (true)
  {
    for (int n=0; n<3; n++)
    {
      if (!active_button_event[n])
      {
        btn = button[n];
        if (ButtonPressed(btn,false) && !button_press_detected[n])
        {
          button_press_detected[n] = true;
        }
        if (button_press_detected[n] && !ButtonPressed(btn,false))
        {
          Acquire(buttonStateMutex);
          if (ButtonLongReleaseCount(btn)>0)
          {
            button_press_type[n] = LONGBUTTONPRESS;
          }
          else if (ButtonShortReleaseCount(btn)>0)
          {
            button_press_type[n] = SHORTBUTTONPRESS;
          }
          else
          {
            button_press_type[n] = UNDEFINEDBUTTONPRESS;
          }
          active_button_event[n]=true;
          Release(buttonStateMutex);
          button_press_detected[n] = false;
          ResetButtonCounts(btn);
        }
      }
    }
    Wait(10);
  }
}

void clear_data_line(const byte & line)
{
  string blank = "     ";
  TextOut(XL, line, blank);
  TextOut(XC, line, blank);
  TextOut(XR, line, blank);
}

task main() {
  int line;
  ClearScreen();
  TextOut(XL, LCD_LINE1, "Left");
  TextOut(XC, LCD_LINE1, "Cntr");
  TextOut(XR, LCD_LINE1, "Rght");
  for (int n=0; n<3; n++) 
  {
    ResetButtonCounts(button[n]);
  }
  
  while(true)
  {
    clear_data_line(LCD_LINE2);
    clear_data_line(LCD_LINE3);
    clear_data_line(LCD_LINE4);
    clear_data_line(LCD_LINE5);
    clear_data_line(LCD_LINE6);
    clear_data_line(LCD_LINE7);
    clear_data_line(LCD_LINE8);

    for (int n=0; n<3; n++)
    {
      byte btn = button[n];
      if (ButtonPressed(btn,false))
      {
        TextOut(lcd_x[n], LCD_LINE2, "xxx");
      }
      NumOut(lcd_x[n], LCD_LINE3, ButtonPressCount(btn));
      NumOut(lcd_x[n], LCD_LINE4, ButtonLongPressCount(btn));
      NumOut(lcd_x[n], LCD_LINE6, ButtonReleaseCount(btn));
      NumOut(lcd_x[n], LCD_LINE7, ButtonShortReleaseCount(btn));
      NumOut(lcd_x[n], LCD_LINE8, ButtonLongReleaseCount(btn));
    }
    Wait(10);
  }
}

