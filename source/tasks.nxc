#define CHAR_WIDTH 6
#define XL 2*CHAR_WIDTH
#define XC 7*CHAR_WIDTH
#define XR 12*CHAR_WIDTH

#define SHORTBUTTONPRESS 0
#define LONGBUTTONPRESS 1
#define UNDEFINEDBUTTONPRESS 2

int lcd_x[] = {XL, XR, XC};
bool active_button_event[3];
byte button_press_type[3];
mutex buttonStateMutex;

void ResetButtonCounts(const byte & btn)
{
  SetButtonPressCount(btn,0);
  SetButtonLongPressCount(btn,0);
  SetButtonShortReleaseCount(btn,0);
  SetButtonLongReleaseCount(btn,0);
  SetButtonReleaseCount(btn,0);
}

task button_handler()
{
  byte button[] = {BTNLEFT, BTNRIGHT, BTNCENTER};
  bool button_press_detected[3];
  int btn;
  
  for (int n=0; n<3; n++)
  {
    btn = button[n];
    ResetButtonCounts(btn);
    button_press_detected[n] = false;
  }  
  while (true)
  {
    for (int n=0; n<3; n++)
    {
      if (!active_button_event[n])
      {
        btn = button[n];
        if (ButtonPressed(btn,false) && !button_press_detected[n])
        {
          button_press_detected[n] = true;
        }
        if (button_press_detected[n] && !ButtonPressed(btn,false))
        {
          Acquire(buttonStateMutex);
          if (ButtonLongReleaseCount(btn)>0)
          {
            button_press_type[n] = LONGBUTTONPRESS;
          }
          else if (ButtonShortReleaseCount(btn)>0)
          {
            button_press_type[n] = SHORTBUTTONPRESS;
          }
          else
          {
            button_press_type[n] = UNDEFINEDBUTTONPRESS;
          }
          active_button_event[n]=true;
          Release(buttonStateMutex);
          button_press_detected[n] = false;
          ResetButtonCounts(btn);
        }
      }
    }
    Wait(10);
  }
}

void clear_data_line(const byte & line)
{
  string blank = "     ";
  TextOut(XL, line, blank);
  TextOut(XC, line, blank);
  TextOut(XR, line, blank);
}

void init_button_event_handling()
{
  ClearScreen();
  TextOut(XL, LCD_LINE1, "Left");
  TextOut(XC, LCD_LINE1, "Cntr");
  TextOut(XR, LCD_LINE1, "Rght");
}

task button_event_handler()
{
  init_button_event_handling();
  while (true)
  {
    clear_data_line(LCD_LINE3);
    for (int n=0; n<3; n++)
    {
      if (active_button_event[n])
      {
        if (button_press_type[n] == SHORTBUTTONPRESS)
        {
          TextOut(lcd_x[n], LCD_LINE3, "Short", false);
        }
        else if (button_press_type[n] == LONGBUTTONPRESS)
        {
          TextOut(lcd_x[n], LCD_LINE3, "Long", false);
        }
        else if (button_press_type[n] == UNDEFINEDBUTTONPRESS)
        {
          TextOut(lcd_x[n], LCD_LINE3, "Undef", false);
        }
        else
        {
          TextOut(lcd_x[n], LCD_LINE3, "????", false);
        }
        Wait(2000);
        Acquire(buttonStateMutex);
        button_press_type[n] = UNDEFINEDBUTTONPRESS;
        active_button_event[n] = false;
        Release(buttonStateMutex);        
      }
    }
  }
}

void init_button_event_communication()
{
  Acquire(buttonStateMutex);
  for (int n=0; n<3; n++)
  {
    active_button_event[n] = false;
    button_press_type[n] = UNDEFINEDBUTTONPRESS;
  }
  Release(buttonStateMutex);
}

task main()
{
  Precedes(button_handler, button_event_handler);
  init_button_event_communication();
}

